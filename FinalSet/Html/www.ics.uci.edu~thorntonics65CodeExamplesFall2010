<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../course.css" type="text/css" />

<title>ICS 65 Fall 2012, Code Examples from Fall 2010</title>
</head>

<body>

<div class="navbar">

<p>
ICS 65 Fall 2012 |
<a href="../index.html">News</a> |
<a href="../CourseReference.html">Course Reference</a> |
<a href="../Schedule.html">Schedule</a> |
<a href="../LabManual">Lab Manual</a> |
<a href="../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 65 Fall 2012<br />
   Code Examples from Fall 2010</p>

</div>

<div class="section">

<hr />

<p class="title">Code examples</p>

<p>Since this course is somewhat of a rebuild from its previous incarnation (Fall 2010), I was asked by a couple of students to preserve the code examples from that previous version of the course.  These are those code examples.</p>

<p>You will see some of these code examples show up verbatim later in the course; others will be replaced with new ones, or will be modified from what you see here.</p>

<table class="normal">
  <tr class="top">
    <td>Description</td>
  </tr>
  <tr>
    <td><a href="HeaderAndSourceFiles.zip">The square/cube example of separate compilation from lecture (including protection against multiple inclusion)</a></td>
  </tr>
  <tr>
    <td><a href="OddsAndEnds.zip">A few odds and ends from the lecture that included default arguments, references, pass-by-reference parameters, and "constness"</a></td>
  </tr>
  <tr>
    <td><a href="Song.zip">The Song example of writing a class in C++</a></td>
  </tr>
  <tr>
    <td><a href="Blarg.zip">The Blarg example of destructors, copy constructors, and overloaded assignment operators</td>
  </tr>
  <tr>
    <td><a href="Queue.zip">The "well-behaved" Queue example</a></td>
  </tr>
  <tr>
  	<td><a href="StandardLibrary.zip">A variety of examples of using the C++ Standard Library</a></td>
  </tr>
  <tr>
  	<td><a href="Person.zip">The Person/Student example of inheritance (including polymorphism and virtual functions)</a></td>
  </tr>
  <tr>
  	<td><a href="ShapeBad.zip">The Shape/Circle example done badly (including a virtual function call in constructor)</a></td>
  </tr>
  <tr>
  	<td><a href="Shape.zip">The Shape example done right (including the use of a "mutable" member variable and an explicit constructor)</a></td>
  </tr>
  <tr>
    <td><a href="Complex.zip">The Complex class, as an example of operator overloading</a></td>
  </tr>
  <tr>
    <td><a href="TemplateFunctions.zip">Writing template functions</a></td>
  </tr>
  <tr>
    <td><a href="QueueTemplate.zip">A template version of our "well-behaved" Queue</a></td>
  </tr>
  <tr>
  	<td><a href="PolymorphicClone.zip">The "polymorphic clone" technique</a></td>
  </tr>
  <tr>
  	<td><a href="MultipleInheritance.zip">The Person/StudentEmployee example of multiple inheritance, virtual inheritance, and the "diamond inheritance problem"</a></td>
  </tr>
  <tr>
  	<td><a href="VectorWithExceptions.zip">An implementation of Vector using dynamically-allocated arrays and exception safety techniques</a></td>
</table>

</div>

</body>
</html>

