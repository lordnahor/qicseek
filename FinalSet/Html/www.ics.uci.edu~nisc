<html>
<head>
<title>NISC Technology</title>
<link href="library/styles.css" type="text/css" rel="stylesheet" />
<meta name="keywords" content="application-specific, high-level highlevel synthesis, C-to-HDL, C-to-RTL, free C-to-Verilog, C-to-VHDL, IP design, refinement, FPGA, ASIC" />
<meta name="verify-v1" content="szpHTcBhi3SGwpopR+bBCSfNuag+h/yahMcvpCTt/cY=" />
<style type="text/css">
<!--
.style1 {color: #990066}
h2 {color:#0000CC;}
-->
</style>
</head>
<body>
<iframe src="/~nisc/library/menu/index.html" scrolling="No" frameborder="0" height="150" width="100%"> </iframe>
<div></div>
<!--<iframe src="library/menu/index.html" scrolling="no" frameborder="0" height="200" width="100%"> </iframe>-->
<table border="0" width="100%">
  <tr>
    <td width="68%" valign="bottom"><h1 class="style1">NISC Technology &amp; Toolset </h1>
      <strong>NISC</strong>  (<a href="http://content.answers.com/main/content/pronkey-answers.html" target="_blank">n&#301;sk</a>) = <strong>N</strong>o-<strong>I</strong>nstruction-<strong>S</strong>et-<strong>C</strong>omputer</td>
    <td width="32%"><img src="images/see-this.gif" /> <br />
      <img src="images/new_animated2.gif" width="40" align="middle" /> <a href="demo/"> <b>Online tool</b> </a> <br />
     - <strong><a href="toolset/">NiscToolset-2008.10.10</a> released!</strong><br />
     - <span><a href="http://webhostinggeeks.com/science/nics-technology-toolset-be" target="_blank">Belorussian translation</a></span><br/>
	 <!--
     - <strong>See two NISC presentation at DAC 2008 in Sessions <a href="http://www.dac.com/events/eventdetails.aspx?id=77-5">5.4s</a> and <a href="http://www.dac.com/events/eventdetails.aspx?id=77-23">23.1</a></strong>
	 -->
     </td>
  </tr>
</table>
<h2>What can you do with the NISC Technology toolset?</h2>
<ul>
  <li><strong>C-to-RTL synthesis:</strong> You can use the tools as a free C-to-RTL (i.e. C to Verilog) synthesis tool. With the NISC toolset, you can generate a customized RTL for your C code and then get the corresponding architecture description (GNR) and synthesizable Verilog code as output. In contrast to standard high-level synthesis (HLS) tools, after generating the architecture, you can go back, edit the generated architecture, and use it as the input of the NISC toolset again! This way, you can target specific improvement!<br>
    You can also accurately control the area, clock-frequency, power, layout routability, etc. (all of which are left to guesswork and trial-and-error in standard HLS tools!)</li>
  <li><strong>Embedded custom-processor design: </strong>You can use the tools to design embedded custom-processors. You can specify the datapath and the custom-functional units and then (without worrying about designing an instruction decoder, instruction binary, etc) use the NISC toolset to compile your C code on your custom processor. </li>
  <li><strong>Design space exploration:</strong> You can try any &quot;What-if&quot; scenario with the NISC toolset. Change your application C code or the architecture structure and see the results immediately! Explore the effects of adding/removing components, connections, or registers at different places in your datapath and see how it affects clock-frequency, number of cycles, power, area, energy, routability, etc. </li>
</ul>
<h2>Why use NISC?</h2>
<center>
  <img src="documents/nisc-domain.jpg" width="656"/>
</center>
<p>No-Instruction-Set-Computer (NISC) Technology is  the next generation of tools for design synthesis.<br>
  With NISC Technology, you can simultaneously gain higher productivity and better quality of results. Other techniques only offer one of these benefits. </p>
<p>Two popular approaches for designing digital systems:</p>
<ul><li> <strong>Low-level design at Register Transfer Level (RTL).</strong>
    <ul>
      <li>Can lead to efficient IPs but the development time and cost is very high.</li>
      <li> High-Level-Synthesis (HLS)
        goal: improve productivity
        <ul>
          <li>Automatically converts high-level description of the IP (e.g. written in C language) to RTL</li>
          <li>Designer has little control over the quality of the generated RTL in terms of clock frequency,
  area, manufacturability, power, etc.
            <ul>
              <li>Result quality is typically bad. </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>High-level design using general-purpose or custom processors.</strong>
    <ul>
      <li>Development time and cost is much lower, but the efficiency and implementation quality is also much lower.</li>
      <li>Application-Specific-Instruction-Processors (ASIP) goal: improve quality
        <ul>
          <li>Adds application-specific instructions
  to the processor
            <ul>
              <li>Finding suitable custom instructions and adding them to the toolset (compiler, simulator, etc.) is a very challenging task.</li>
              <li>Because of their instruction-set, processors (including ASIPs) impose a minimum overhead in terms of area, power, and performance.                </li>
            </ul>
          </li>
          <li>The processor-based implementation may become more appealing only when the IP design complexity is above a certain level (relatively very high).
            <ul>
              <li>Not suitable if you want to run a few algorithms or design a hardware block. </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<p>Switching from RTL design to ASIP (and vice versa) requires changing the entire toolset and skill-set. So, you can only explore a very small domain. None of these approaches are suitable for designs with medium complexity! </p>
<p> With <b>NISC Technology</b> we address both the design productivity and quality. <b>The main idea is to automatically compile a given application on a given datapath.</b> <br>
  NISC technology offers a new approach for design of custom processor and IPs.
  It removes instructions to enable faster execution and better customization.
  Without instructions, NISC compiler has full control of all the components and connections in the datapath which enables it to
  achieve better resource utilization. One NISC toolset is sufficient for all possible datapaths.
  Therefore, NISC is the universal processing element for all IP designs.</p>
<center>
  <img src="documents/cisc-risc-nisc.gif" />
</center>
<h2>NISC Technology Benefits</h2>
<ul>
  <li> <b>High productivity gain</b> through RTL code generation</li>
  <li> <b>Better quality</b> of the results
    <ul>
      <li>Aggressive power, performance and area optimization</li>
      <li>Seamless custom unit integration</li>
      <li>Optional manual optimizations</li>
    </ul>
  </li>
  <li> <b>Easy system integration</b> </li>
  <li>Providing ultimate <b>reuse</b>, <b>reprogrammability</b> and <b>reconfigurability</b> </li>
  <li>Facilitating <b>design for manufacturability</b>: layout available before compilation</li>
  <li> <b>Fast design space exploration</b> of "what if" scenarios</li>
  <li> <b>One toolset</b> for all IPs</li>
  <li> <b>Excellent market penetration</b> through customization</li>
</ul>
<h2>Who can use NISC?</h2>
<p>NISC Technology can be used for many different purposes. You may want to use NISC if you are: </p>
<ul>
  <li>A digital designer looking to explore different design alternatives for implementing an algorithm.</li>
  <li>A software developer interested in performance evaluation of an algorithm on a specific architecture.</li>
  <li>A system developer interested in generating IP blocks and improving performance of different parts of an application.</li>
  <li>an architecture researcher/developer interested in evaluating the effect of different architectural techniques on an actual implementation.</li>
  <li>An FPGA user looking for an easy way of programming an FPGA.</li>
  <li>An ASIC designer interested in quickly prototyping on FPGA.</li>
  <li>A co-processor or accelerator developer.</li>
  <li>An educator interested in showing the students how programs  actually execute in hardware.</li>
  <li>An EDA researcher interested in different design aspects such as application code modification/transformation, architecture description, physical-aware design, ...</li>
  <li>...</li>
  <li>A student or hobbyist looking to do really cool stuff!!! </li>
  <li>Even a researcher doing verification (see <a href="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4110083">this</a>!) </li>
</ul>
<dl>
  <dt> <span style="font-size:large; font-weight:bold;">Read more:</span> </dt>
  <dd> <a href="documents/features.html">NISC Features</a> </dd>
  <dd> <a href="documents/FAQ.html">NISC Toolset FAQ</a> </dd>
  <dd> <a href="documents/nisc-introduction.pdf">NISC Introduction</a> </dd>
  <dd> <a href="documents/nisc-system-prototype.pdf">NISC in System</a> </dd>
  <dd> <a href="publications/">Related publications</a> </dd>
  <dd> <a href="designs/">Example designs</a> </dd>
  <dd> <a href="forum/">Join the NISC user forum</a></dd>
  <dd> <a href="toolset/">Download &amp; install free tools (for custom IP design, and C to Verilog conversion)</a> </dd>
  <dd> <a href="demo/">Try the tools online (for custom IP design, and C to Verilog conversion)</a></dd>
</dl>
<iframe src="http://cecs02.cecs.uci.edu/utils/Track.aspx" scrolling="no" frameborder="0" height="0" width="0"> </iframe>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2089831-1";
urchinTracker();
</script>

<iframe src="/~nisc/library/counters/index.html" scrolling="no" frameborder="0" height="50" width="100%"> </iframe>


</body>
</html>

