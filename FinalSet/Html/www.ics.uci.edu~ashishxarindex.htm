<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>XAR: Extraction with Adaptive Rules</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
.style1 {
	color: #7F0000;
	font-size: 24px;
	font-family: Arial, Helvetica, sans-serif;
	font-weight: bold;
}
.style5 {font-family: Arial, Helvetica, sans-serif}
.style6 {font-size: 12px}
.style7 {
	font-size: 14px;
	font-family: Georgia, "Times New Roman", Times, serif;
	font-style: italic;
}
.style8 {
	font-family: "Times New Roman", Times, serif;
	font-weight: bold;
}
-->
</style>
</head>

<body>
<p align="center" class="style1"><img src="xar2.png" width="262" height="62"></p>
<a rel="license" href="http://creativecommons.org/licenses/by-nc/3.0/">
<img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc/3.0/88x31.png" />
</a>
<br />This work is licensed under a 
<a rel="license" href="http://creativecommons.org/licenses/by-nc/3.0/">Creative Commons Attribution-Noncommercial 3.0 License</a>.
<p><strong>What is XAR ?</strong></p>
<p>XAR is a general purpose framework and platform for building information extraction applications and systems. A particular focus is on the extraction of relations or <em>slot-filling</em>, from <em>free text</em> data. For each new extraction task, the user typically writes some XAR extraction rules which are based on Datalog. Consider a task  of extracting a relation of details about reports or instances of corporate acquisitions (details such as the buyer, the company the got bought, amount acquired for etc.), from free text such as:. </p>
<table width="760" border="0">
  <tr bgcolor="#7FFF55">
    <td bgcolor="#FF9FFF" class="style5 style7">&quot;Microsoft Corp today acquired ABC networks for $150 million in cash.&quot;</td>
  </tr>
  <tr bgcolor="#7FFF55">
    <td width="541" class="style5"><p class="style6">buyer(X) :- organization (X), anchor(A), immbefore(X,A).</p>
    <p class="style6">buyer(X) :- anchor(A), who(A,X).</p></td>
  </tr>
</table>
<p>We have also illustrated two Datalog based <em>extraction rules</em> that assign tokens from the text to the 'buyer' slot. The first rule is based on the observation of a general pattern that <em>&quot;any token which is an <strong>organization</strong> and which appears<span class="style8"> just before</span> an <strong>anchor</strong> word in the text is likely the buyer&quot;</em>. Some such rules have to be authored manually for each task, however we provide some attractive functionalities for the user:</p>
<p><em>Automated feature extraction: </em>The predicates that you see in the rule bodies above, refer to properties of tokens and entities and relationships amongst them. For instance specifying that something is an <em>organization</em>, an &quot;anchor&quot; (usually an important action such as 'bought', 'acquired' etc.), the fact that some token is <em>immediately before</em> another token etc. A comprehensive set of such predicates is made available <em>automatically</em> to the user. </p>
<p><em>Exploiting semantic information: </em>The user can further specify <em>semantic information </em>about the data to be extracted. Typically, in slot-filling, we are interested in extracting a relation (of facts or events) from text. We can specify a <em>schema</em> and also <em>integrity constraints</em> about this relation, which in fact is exploited in improving the accuracy of extraction and also significantly reducing user effort (for writing rules).</p>
<p><em>Extensibility: </em>The XAR architecture is modular and open. For extracting features of tokens we have integrated in two analyzers by default (i) GATE which does named entity recognition and other &quot;shallow&quot; analysis, this helps us obtain features such as whether a particular token is a named-entity (such as an organization, location etc.), a specific type of word (an anchor, thing etc.), and structural information (what token is before a certain other token etc.), and (ii) the StanfordParser, a natural language parser using which we can (optionally) do a complete semantic parse of certain sentences and derive information from such analysis. The &quot;who&quot; predicate you see in the second rule above is actually synthesized from a semantic parse of a sentence. The user however is free to plug-and-play other analyzers (for instance an alternative to GATE may be a framework such as UIMA or even use a combination of the two), use an alternative NL parser or multiple parsers, or even integrate in different kinds of analyzers such as say a text classifier etc. </p>
<p><em>Probabilistic framework:</em> Uncertainty is intrinsically associated with any automated extraction process. No step in the &quot;extraction pipeline&quot;, be it the identification of named-entities or other tokens, parsing of sentences, or associating tokens with slots based on the extraction rules is error free. The XAR framework allows for the incorporation of probabilistic confidence values associated with the various predicates and extraction rules. </p>
<p><strong>Usage and Effectiveness</strong></p>
<p>You can get a quick assesment of the usage (i.e., what is required of the user in terms of extraction rules etc.) and also effectiveness (i.e., extraction accuracy) from the results of a news stories extraction task described <a href="details.htm">here</a>. </p>
<p><strong>Obtaining XAR</strong></p>
<p>Please send an email to ashish who resides at ics dot uci dot edu for a beta version of the software (and source code). </p>
<p><strong>Documentation</strong></p>
<p>1. <a href="install.htm">Installation</a></p>
<p>2. <a href="veryfirst.htm">Getting Started</a></p>
<p>3. <a href="examp.htm">A Walk-through Example</a> </p>
<p>4. <a href="bnf.htm">Detailed description of the extraction specification and language</a></p>
<p>5. <a href="use.htm">Using XAR</a></p>
<p>6. <a href="research.htm">Research Issues for Exploration</a></p>
<p><strong>Developers</strong></p>
<p>The XAR system has been developed at UC-Irvine under the aegis of the NSF funded RESCUE and SAMI projects. The primary architect and developer of the XAR system is Naveen Ashish. Sharad Mehrotra is a collaborator on the design aspects. </p>
<p>XAR is at this point a research prototype and has not (yet) had  benefit of any software engineer help, testing, or support. While I do not promise you well tested, bug-free code, we are offering out the source code. Also do email me any queries or clarifications either about the system usage or the system itself and I will try my best to respond in good time. </p>
</body>
</html>

