<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>HW3: </title>
  </head>
  <body>
    <h1>HW3: Seam Carving for Image Retargeting</h1>
    <h3> Due Nov 6 in EEE DropBox at 11:59 pm </h3>
    <hr>

<h2>Seam Carving for Image Retargeting</h2>


<a href="tree.jpg"> <img width=275 src="tree.jpg"> </a>
<font size="-1"><br>
An image of a tree.
</font>
<br>
<br>

<a href="tree_v.jpg">	 <img width=275 src="tree_v.jpg"></a>
<font size="-1"><br>
Vertical seam removal time map for the image of
a tree.  Black = early, white = late.
</font>
<br>
<br>

<a href="tree.jpg_v.mov"> <img width=300 src="tree_v_preview.png"></a>
</a><br>
<font size="-1">
Animation of uniform scaling (top row) and seam removal (bottom row).
Click to play.
</font>
<br>
<br>

<p>
In this assignment, prepared by <a href="http://vision.bc.edu/~dmartin/"> David Martin<a/>, you implement the image retargeting algorithm of <a href="http://seamcarving.com/arik/imret.pdf"> Avidan &amp Shamir </a>.
This is a very clever algorithm that
was recently developed for resizing images in a manner
that is adaptive to the image content.  Typical
image resizing, as is done in <tt>imresize</tt>,
for example, scales the image uniformly.  The Avidan
&amp; Shamir algorithm attempts to remove the boring bits
of the image while retaining the important bits.  The
queue that is used for determining what is important
is very low-level, however, and so the algorithm does
not always produce good results.  It is surprising, 
though, how well it does work.  Apart from implementing
the algorithm, your job is also to evaluate its 
utility.

</p><ul>
<li><a href="downloads">Downloads</a>
</li></ul>

<h4>Programming [20 points]</h4>

<p>
Implement a function with the following prototype:

</p><blockquote><tt><pre>function [M] = removalMap(I)
</pre></tt></blockquote>

<p>
This function should take a grayscale image as input (not an image
filename) and return a <i>horizontal seam removal time map</i>, as
defined in the paper.  The pixels should be valued between 1 and H,
where H is the image height.  The seam removal time map tells you
which pixels to remove if you want to remove N seams: those pixels
labeled 1 through N.

</p><p>
Here is a viewer program (<tt>show.m</tt>, written by David Martin) that takes an image
and seam removal time map (horizontal or vertical), and lets you
resize the image interctively by dragging the mouse or moving the
mouse wheel.  To use this code, you'll have to
implement <tt>shrink</tt> and <tt>expand</tt> functions that shrink
and expand an image by N horizontal seams given and image and a
horizontal seam removal map.

</p><h4>Writeup [20 points]</h4>

<ol>

<p></p><li> Show and discuss one interesting successful result of
shrinking an image hoizontally, and one vertically.  Use two different
images.

<p></p></li><li> Show and discuss one interesting unsuccessful result of
shrinking an image hoizontally, and one vertically.  Use two different
images.

<p></p></li><li> Show side-by-side comparison of 50% and 150% resizing using
uniform scaling vs. seam removal/insertion for the 4 images from the
first two questions.

<p></p></li><li> Show and discuss two interesting successful results of content
amplification.

</li></ol>

<h4>Matlab Tips</h4>

<ol>

<p></p><li> You can't use transpose to transpose an RGB image.  Instead,
use the <tt>permute</tt> function to swap the first two dimensions:
<tt>I = permute(I,[2,1,3])</tt>.

<p></p></li><li> Do not implement any vertical seam algorithms.  The horizontal
seam case is simpler to implement in matlab, and you can use horizontal
seam code to create and manipulate vertical seams by transposing arguments
and results.

<p></p></li><li> If you want to make movies of your results, use the
<tt>avifile</tt>, <tt>addframe</tt>, and <tt>close</tt> functions as
follows, making sure that each frame is the same size:

<blockquote><tt><pre>mov = avifile('movie.avi');
frame.colormap = [];
for i = 1:nframes,
    frame.cdata = someImage;
    mov = addframe(mov,frame);
end
mov = close(mov);
</pre></tt></blockquote>

<p>
Note that the movies that matlab creates are enormous uncompressed AVI
files.  It is a good idea to transcode them into something like DivX
or H.264 using something like Quicktime Pro or mencoder if you want to
put them in your writeup or on the web.

</p><p></p></li><li> Use the <tt>sprintf</tt> function to construct output filenames
based on input filenames.  For example, 
<tt>sprintf('%s.avi',inputFileName)</tt> will create an AVI filename
from some input file name.

</li></ol>

<h4>Extra-credit</h4>
    As detailed in the <a href="../../hw_guide.html"> guidelines</a>, any project handed by 11:59 pm on the previous day (Nov 5th), will recieve 10% (4 points) extra credit.

</p></div></center>
</body></html>
