<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 32 Winter 2014, Code Example: Sockets, Part 2</title>

</head>

<body>

<div class="navbar">

<p>
ICS 32 Winter 2014 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 32 Winter 2014<br />
   Code Example: Sockets, Part 2</p>

</div>

<div class="section">

<hr />

<p class="title">Background</p>

<p class="subtitle">Sending and receiving text via sockets</p>

<p>Many programs that communicate over a network do so by sending text back and forth; quite often, textual communication protocols are based around the concept of <i>lines</i> of text terminated by a special sequence of characters called an <i>end-of-line sequence</i>.  We've previously seen how to read lines of text from files; unfortunately, the mechanisms we've seen for reading data from a socket are a lot harder to work with, allowing us to retrieve a given number of <i>bytes</i> from a socket's input stream, which leaves us with two difficulties:</p>

<ul>
  <li>Decoding the bytes we receive, turning them from bytes into strings.</li>
  <li>Finding where one line of ends and another begins.  And since we have to ask for a certain number of bytes at a time, but are never necessarily sure ahead of time how many bytes make up a line (since different lines may contain different numbers of bytes), we'll have to go to a lot of trouble: if we read too few characters, we'll need to read more; if we read too many, we'll need to hang on to the extra ones so we can use them as part of the next line we read.</li>
</ul>

<p>It seems a shame that we can't just treat a socket the way we do a text file.  Files contain bytes, too, but when we read from text files in Python, the file object converts between bytes and strings and finds where one line ends and another begins automatically; we just have to call <b>readline()</b> and the right things happen.</p>

<p>As is often the case in a programming language library, when you dig a little bit further, you find the tool you were looking for.  If you want to treat a socket similarly to how you treat a text file &mdash; reading lines and getting back strings, writing strings &mdash; you can do it.  You just have to ask for a "middleman" of sorts, an object that behaves outwardly the way a file object does, but that reads and writes via a socket rather than a file.</p>

<p>Sockets in Python provide a <b>makefile()</b> method that can give you such a "middleman."  The arguments you pass to this method are the same as the arguments you pass to the built-in <b>open()</b> function that opens files, and the object returned to you appears a lot like a file object &mdash; it supports methods like <b>readline()</b> and <b>write()</b>.</p>

<p>This code example makes use of the <b>makefile()</b> method to simplify how we read from and write to our sockets.</p>

</div>

<div class="section">

<hr />

<p class="title">The code</p>

<p>In lecture, we rewrote the echo client program from the <a href="../SocketsPart1">previous code example</a> using the socket's <b>makefile()</b> method to let us read and write lines of text instead of bytes.  That example follows.</p>

<ul>
  <li><a href="echo_client.py">The <b>echo_client</b> module</a></li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Trying out the example client</p>

<p>An echo server like the one we connected to during lecture is now running on the same machine that the Connect Four server for <a href="../../ProjectGuide/Project2">Project #2</a> is running.  (See a previously-sent email for an indication of where that is.)  The echo server is listening on port 5151.</p>

<p>For fun, try connecting to port 5150 or 5152 instead, where there are servers that do something different &mdash; they still respond with a line of text every time you send them one, but the text they send is not just a copy of what you send them.  See if you can figure out what these servers do.</p>

</div>

</body>
</html>

