<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>HW2: </title>
  </head>

  <body>
    <h1>HW2: Texture Synthesis</h1>
    <h3> Due Oct 23 in EEE DropBox at 11:59 pm </h3>
    <hr>

    In this assignment, originally prepared by Rob Fergus, you will implement the Efros and Leung Texture Synthesis Algorithm. The original paper, along with pseudocode for the algorithm, can be found <a href = "http://graphics.cs.cmu.edu/people/efros/research/EfrosLeung.html">here</a>. The description is quite nice, and contains all the information needed to implement the algorithm.

The following directory contains two images. Your task for this assignment is to

<ol>
<li> Fill in the hole in <tt>fill.png</tt>. The hole is defined as pixels that have intensity 0.
<li> Pad the image <tt>extend.png</tt> by 11 pixels on each side. It is currently 53x49 pixels, and you will need to add pixels until it is 75x71 pixels.

</ol>

    <ul>
      <li><a href="downloads">downloads</a>
    </ul>
 
    <h4>Programming [25 points]</h4>

    Write the following 4 functions (each in their own file) 
    with the following prototypes to perform each of the
    processing steps, such that the following code should do something
    sensible:
    
    <blockquote><tt><pre>
Image = im2single(imread('fill.pgm'));
WindowSize = 7;
Result = FillImage(Image,WindowSize); % 10 pts
...(within FillImage.m)....
indices = GetUnFilledNeighbors(Image); % 5 pts
[matches,errs] = FindMatches(Template,Image); %10 pts
      </pre></tt></blockquote>
    <ol>
      
	<hr>
	<blockquote><tt><pre>
[Result] = FillImage(Image,WindowSize);
% FillImage - takes an input a grayscale image, and fills in the
% 0-values using Efros-Leung
%
% Image: a grayscale image, with some missing pixels set to 0
% Windowsize: The size of the window used for synthesis
% Result: a grayscale image with all pixels filled-in
	  </pre></tt></blockquote>
	<p><li><b>[10 points]</b> This function does all of the work. It will call both <tt> GetUnFilledNeighbors</tt> and <tt>FindMatches</tt> in its body. It will return the Image, where all zero-valued pixels have been filled with a "synthesized" pixel using Efros & Leung's texture synthesis algorithm. The content of the function follows the pseudocode linked above. 
 <p>Loosely, it loops over the set of unknown pixels which are adjacent to known pixel values. For each unknown pixel in this set, it finds the set of all matching pixel neighborhoods from the original Image. It then randomly picks a matching neighbor to fill in the current unknown pixel.
	  </pre></blockquote>

	<hr>
	<blockquote><tt><pre>
function [indices] = GetUnFilledNeighbors(Image); % 5 pts
% GetUnFilledNeighbors
% Image: grayscale image, with some missing pixels set to 0
% indices: The set of indices of unfilled-pixels which are neighbors with a filled pixel
</pre></tt></blockquote>

	<p><li><b>[5 points]</b> This function looks for unfilled pixels which are next to at least one filled-in pixel. This can be computed efficiently using morphological dilate operation - see <a href="http://homepages.inf.ed.ac.uk/rbf/HIPR2/dilate.htm"> here </a>. Let <tt>mask</tt> be a binary image, where '1' denotes a filled-in pixel. <tt> imdilate(mask,ones(3)) - mask </tt> produces a binary image of unfilled pixels which are neighbors with a filled pixel. One can find the indices of the non-zero pixels using the <tt> find </tt> command. I suggest using <tt> help </tt> for more information on these functions.
<hr>
	<blockquote><tt><pre>
function [match,err] = FindMatch(Template,Image)
% This function takes the patch Template, 
% and finds similar-looking patches from Image

% Image: grayscale image
% Template: small grayscale image (of size WindowSize by WindowSize)
%
%
% match: A vector of pixel values that match well with the center of Template
% err: A vector of errs for each pixel value
	  </pre></tt></blockquote>
	
	<p><li><b>[10 points]</b> This function searches Image for image patches that match well with Template. Note that template will always contain at least one unfilled pixel - the center. Use a Guassian-weighted sum-of-squared-difference (SSD) score to measure the match between the Template and a patch in the image. You can use <tt> GaussMask = fspecial('gaussian',size,sigma)</tt> to create a Gaussian mask. Make sure that you don't use the unfilled pixels to score the match of the Template and a patch from the image.
	<hr>

    </ol>

    <h4>Matlab Tips</h4>
    
    <ol>
      
	<p><li> <tt> ind2sub </tt> is a handy command that generates the x,y location corresonding to an index. It will be useful to iterate over the list of indices returned by <tt> GetUnFilledNeighbors </tt>.
	<p><li> <tt> rand </tt> is the command for generating a random number. This will be useful for randomly selected a matching patch.
	<p><li> One can multiply all the entries of two matrics A and B with <tt> A.*B</tt>. This may prove useful for calculating the Guassian-weighted SSD score.

	<p><li> Plot the image as you fill the pixels in, like a movie.  This will be useful for debugging, and also looks pretty cool! Use <tt> imshow(Image); drawnow; </tt> to plot the image and force Matlab to update the figure window. Place this command within the main loop of <tt> FillImage.m</tt> to generate a sequence of images.
	<p><li> Debug your code using a small WindowSize, since this makes the algorithm faster.
    </ol>	

    <h4>Writeup [10 points]</h4>
    
    <p>
      Use both images for the writeup.

    <p><li><b>[5 points]</b> Show the results on <tt> expand.png </tt>, varying the windowsize parameter. Zoom in and show details illustrating the success/failures of the method.
    <p><li><b>[5 points]</b> Show the results on <tt> fill.png </tt>, varying the windowsize parameter. Zoom in and show details illustrating the success/failures of the method.

    </ol>
    <h4>Extra-credit</h4>
    As detailed in the guidelines <a href="../../hw_guide.html"> guidelines</a>, any project handed by 11:59 pm on the previous day, will recieve 10% extra credit.
  </body>
</html>

