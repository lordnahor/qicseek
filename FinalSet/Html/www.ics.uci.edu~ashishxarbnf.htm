<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
.style14 {font-family: "Courier New", Courier, mono; font-size: 12px; }
-->
</style>
</head>

<body>
<p>We describe the specification (language) for the schema, extraction rules, and constraints formally and in more detail. Note that in addition we have also provided specifcation for some preassembled application in the directory &quot;preassembledspecs&quot;. There you will find a complete schema, set of extraction rules, and constraints for 3 different extraction extraction tasks. </p>
<p><strong>1. Schema</strong></p>
<p>We basically have a list which contains , seperated items of the form</p>
<p>buyer : company</p>
<p>To the right of the : we specify the type. We can specify multiple types, for instance</p>
<p>buyer : company university</p>
<p>The basic types the system recognizes are person, organization, location, country, thing, action, money, date,time, source, degree, university, and title</p>
<p>Arity or NULL valued related constraints can also be specified. For instance</p>
<p>buyer : company university not NULL MV  </p>
<p>So a complete schema schema is:</p>
<p>create table acquire( buyer : company university not NULL, amount : money, whom: company not NULL). </p>
<p>createstatement := &lt;create&gt; &lt;event&gt; X &lt;(&gt; attribute_list &lt;)&gt;</p>
<p>attribute_list :=</p>
<p><strong>2. Rules</strong></p>
<p>(i) Predicates. A number of tokens of various kinds get instantiated after the features extraction. We have predicates corresponding to each of these. Namely the predicates person(X), organization(X), thing(X), date(X), location(X), sentence(X). </p>
<p>There are also some special predicates. There is a vbanchor predicate which is true for all tokens that satisfy being anchor verbs (as specified in &lt;&gt;rules.txt). Also special predicates get generated correspoding to any patterns specified in &lt;&gt;patterns.txt. For instance for vcdeals we have special predicates such as &quot;toksecured&quot; etc. </p>
<p>(ii) Other features and predicates</p>
<p>Let us use the following text segment as an example. <em>&quot;Microsoft today bought ABC networks for $45 million in cash. Microsoft stock rose slight by 0.5% to close at $25.76 a share at the end of trading today. Neither company provided any firther details.&quot; </em></p>
<table width="673" border="1">
  <tr>
    <td width="397"><strong>Predicate</strong></td>
    <td width="260"><strong>Example</strong></td>
  </tr>
  <tr>
    <td>sentence(X,S) : The token X is in sentence S. </td>
    <td><span class="style14">sentence(microsoft,1)</span></td>
  </tr>
  <tr>
    <td>position(X,P) : The position P of the token X </td>
    <td><span class="style14">position(abc_networks, 24) </span></td>
  </tr>
  <tr>
    <td>before(X,Y) : The (absolute) position of (token) X is before that of (token) Y </td>
    <td><span class="style14">before(microsoft, abc_networks)*</span></td>
  </tr>
  <tr>
    <td>after(X,Y) : The (absolute) position of (token) X is before that of (token) Y </td>
    <td><span class="style14">after(bought, cash) </span></td>
  </tr>
  <tr>
    <td>between(X,Y,Z) : Token Z is between token X and token Y</td>
    <td><span class="style14">between(microsoft,45_million,abc_networks)</span></td>
  </tr>
  <tr>
    <td>immbefore(X,Y) : Token X is <em>immediately</em> before token Y (no tokens in between X and Y) </td>
    <td><span class="style14">immbefore(bought, abc_networks) </span></td>
  </tr>
  <tr>
    <td>immafter(X,Y) : Token X is immediately after token Y (no tokens in between X and Y) </td>
    <td><span class="style14">immafter(microsoft, today) </span></td>
  </tr>
  <tr>
    <td>neighbor(X, Y) : Sentence X and Y are adjacent. </td>
    <td><span class="style14">neighbor(2,3)</span></td>
  </tr>
  <tr>
    <td>neighbor(X,Y,D) : Sentence X and Y are at most D (i.e., D number of sentences) apart </td>
    <td><span class="style14">neighbor(1,3,2)</span></td>
  </tr>
  <tr>
    <td>insamesentence(X,Y): X and Y are (any) tokens in the same sentence </td>
    <td><span class="style14">insamesentence(microsoft, abc_networks) </span></td>
  </tr>
  <tr>
    <td>who(X,Y): Typically the doer or subject of an action</td>
    <td><span class="style14">who(bought, microsoft) </span></td>
  </tr>
  <tr>
    <td>what(X,Y): Typically the object of an action</td>
    <td><span class="style14">what(bought, ABC_networks)</span></td>
  </tr>
  <tr>
    <td>whrwhn(X,Y): Information prepositionally associated with the action </td>
    <td><span class="style14">whrwhn(bought, $45million_cash)</span></td>
  </tr>
</table>
<p>(iii) The declarative rules.</p>
<p>A rule is basically of the form:</p>
<p>&lt;rulehead&gt; :- &lt;confidence&gt;*  &lt;list of predicates&gt;</p>
<p>The confidence value is optional. </p>
<p>The following are the properties of the rules.</p>
<p><em>1. The head corresponds to a slot </em></p>
<p>For instance:</p>
<p>R1: buyer1(X) :- organization(X), vbanchor(V), before(X,V).</p>
<p>R2: buyer2(X) :- vbanchor(V), who(V,X).</p>
<p>R3: buyer(X) :- 0.7 buyer1(X).</p>
<p>R4: buyer(X): 0.8 buyer2(X). </p>
<p>R1 and R2 are intermediate rules and R3 and R4 are assignment rules. The head though always corresponds to a slot, in this case buyer. </p>
<p><em>2. The body may refer to EDB predicates as well as heads of other rules</em></p>
<p>buyer(X) :- whom(W), organization(X), insamesentence(X,V), before(X,W)</p>
<p>The rule for buyer, has a reference to whom, which is a slot predicate </p>
<p><em>3. Multiple rules are permitted for the same slot</em></p>
<p><em>4. Negation is permitted but only for predicates in the body of the rule.</em></p>
<p>R1: buyer1(X) :- vbanchor(V), who(V,X).</p>
<p>R2: buyer2(X) :- organization(X), vbanchor(V), before(X,V), not buyer1(Z).</p>
<p>So R2 fires only if R1 cannot be satisfied. Not also that the rules must be<em> stratified</em> wrt negation. </p>
<p><em>5. There are several primitives provided for the user's convenience</em></p>
<p>(i) firstamongst, lastamongst</p>
<p>Choose the first/last amongst (any) set of of tokens, first and last refer to the order of placement in the text segment.</p>
<p>myanchor(X) :- anchor(A), action(X), after(A,X)</p>
<p>firstamongst[myanchor(X)].</p>
<p>&quot;Microsoft bought ABC networks and later announced that it would make further acquistions this year.&quot;</p>
<p>myanchor defines actions that appear after an anchor word. in the abov example these are 'announced' and 'make'. firstamongst selects the first of these i.e., 'announced'. </p>
<p>(ii) Grounding values</p>
<p>We can refer to ground values of tokens. </p>
<p>... :- .... action(X)[announced] </p>
<p>referes to action tokens with the specific value &quot;announced&quot;</p>
<p><strong>3. Constraints </strong></p>
<p>Constraints are esentially integrity constraints over the relation to be extracted. These are specified in regular syntax. Constraints can be at the attribute, tuple, or relation levels. Some examples.</p>
<p>1. Attribute level constraint</p>
<p>The acquistion amount has to be at least $15 million</p>
<p><strong>check amount &gt; $15 milllion</strong></p>
<p>2. Tuple level constraint</p>
<p>The total funding amount (in the VC funding application) must be greater than the current amount secured</p>
<p><strong>check total &gt; current </strong></p>
<p>&nbsp;</p>
</body>
</html>

