<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 45C Winter 2014, Project #0: Getting to Know the ICS 45C VM</title>
</head>

<body>

<div class="navbar">

<p>
ICS 45C Winter 2014 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 45C Winter 2014<br />
   Project #0: <i>Getting to Know the ICS 45C VM</i></p>

</div>

<div class="section">

<p class="center"><b>Due date and time:</b> <i>Friday, January 17, 11:59pm</i></b></p>

</div>

<div class="section">

<hr />

<p class="title">Overview</p>

<p>The goal of this project is to allow you to work through downloading and setting up the <i>ICS 45C VM</i>, which is the development environment we'll be using to do our work in this course, then using it to write a short C++ program.  Having worked through this project, you'll have set up the VM to run on your own computer, experimented with it a little bit, ensured that you know how to "gather" files for submission (the same way you'll do in later projects), and taken some important steps toward being productive on subsequent projects and beyond.</p>

<p>Don't lose sight of the fact that there is a deliverable here; you'll need to write us a very short C++ program and submit it.  Having done that, you'll be sure to be ready to do the same on subsequent projects.  For your trouble, we're offering 2% of your overall course grade, if you're able to do this successfully, but we won't be offering that credit to anyone who doesn't follow these directions and submit exactly what we're looking for, as described below.  You may prefer other ways to work &mdash; a different operating system, different development tools &mdash; but be aware that this course, like many workplaces, is not offering you that choice.</p>

</div>

<div class="section">

<hr />

<p class="title">Virtualization</p>

<p>Traditionally, a computer is a collection of hardware &mdash; processor, memory, secondary storage, video and network adapters, and so on &mdash; on which a single operating system runs at a time.  You "boot" the computer into your chosen operating system, whose role is to arbitrate access to that hardware, so that applications running on top of your operating system can effectively use and share that hardware.  At any given time, a single physical computer traditionally runs one operating system at a time: Windows, Mac OS X, some flavor of Linux, or whatever.  It wasn't that long ago that the only fancy trick to work around this was to install more that one operating system (e.g., one on each of a few hard drives, or even more than one on the same drive), then select one of them at boot time.</p>

<p>Despite all of the pretty user interfaces, the fundamental role of an operating system is arbitrating access to hardware on behalf of the applications it runs.  If an application wants to establish a connection over the Internet, it asks the operating system for access to the network interface; the operating system manages data moving into and out of the network interface, and makes sure that it is directed to the right application when it arrives.</p>

<p>More recently, <i>virtualization</i> has dramatically altered the way that an operating system interacts with its underlying hardware.  Operating systems are ultimately just programs; they're software.  So it makes a certain amount of sense that operating systems could run like applications do.  Instead of running them "directly" on the hardware, virtualization allows us to run them on top of another "bridge" application <i>within</i> another operating system; that bridge is sometimes called a <i>virtualizer</i>.  In this scenario, we call the "main" operating system (the one running directly on the hardware) the <i>host</i> and the other operating system the <i>guest</i>.  Every time a program on the guest operating system needs access to hardware, it asks the virtualizer to negotiate with the host operating system for that access; the host operating system can grant it the way it grants hardware access to any other application.  If the guest operating system needs to receive something from the Internet, that is arbitrated by the host operating system; when the host operating system receives data, it passes it through the virtualizer to the guest operating system, who then passes it to whatever application on the guest operating system needed it.</p>

<p>This is a complex trick, but a very important one.  A single computer &mdash; not just beefy, expensive servers in data centers, but relatively inexpensive personal computers like laptops, which are nowadays equipped with hardware support to make this happen more efficiently &mdash; is capable of simultaneously running a host operating system <i>and</i> one or more guest operating systems, limited only by the total amount of memory, processing power, network bandwidth, etc., is available.  Since they must pass through the virtualizer to access hardware, the guest operating systems generally run slower than the host does; you won't necessarily find yourself playing heavy-duty 3D video games or watching high-definition video in a guest operating system.  But virtualization is a wonderful way to experiment with an operating system without fully committing yourself to it, to set up separate software installations for different tasks, to isolate different operating systems and different setups from one another, and to migrate software setups from one computer to another with relative ease.</p>

<p>In this course, virtualization is important because you'll run the ICS 45C VM development environment as a guest operating system in whatever host operating system you prefer, with a virtualizer used to arbitrate between the host and the guest.</p>

</div>

<div class="section">

<hr />

<p class="title">Installing Oracle VM VirtualBox</p>

<p>Before downloading and installing the ICS 45C VM, there's an important prerequisite you'll need first: the virtualizer!  For this purpose, you'll want to download and install a program called Oracle VM VirtualBox, which you can obtain at <a href="http://www.virtualbox.org/">www.virtualbox.org</a>.  VirtualBox is available for Windows, Mac OS X, and various flavors of Unix and Linux, so you should be able to install and run it regardless of which operating system you prefer.  (You'll also find that VirtualBox is already installed on the machines in the ICS labs, so you won't need to download or install it to proceed there.)</p>

<p>The latest version of VirtualBox, as of this writing, is 4.3.6.  This is the only version that I've tested the ICS 45C VM against.  If you already have a different version of VirtualBox (or you prefer a different virtualizer, such as VMware), you may find that these instructions don't match what you see, and you may even find that the ICS 45C VM does not work correctly; I suggest an upgrade.  Unless you have a good reason to use something else, I would suggest installing and using VirtualBox 4.3.6.</p>

</div>

<div class="section">

<hr />

<p class="title">What is the ICS 45C VM?</p>

<p>The ICS 45C VM is a complete installation of an operating system and the necessary software that we'll be using in this course (and little else).  The operating system is Ubuntu Server 13.10 (32-bit).  It's being provided in two configurations:</p>

<ul>
  <li>With no graphical user interface, which will allow you to log into it via a command-line interface, but which will use relatively little memory and processing power.  (This might be a good option if your machine has a relatively small amount of memory or processing power.)</li>
  <li>With a graphical user interface called XFCE, which provides a look-and-feel similar to what you might get on Windows or Mac OS X.  Still, we'll concentrate fundamentally on using the command line, but this will give you a richer experience, if you'd like to go this route.  And note that including the GUI doesn't preclude you from using the VM the same way you use the non-GUI version &mdash; by logging into it via a command-line.  Think of this version as a proper superset of the non-GUI version.</li>
</ul>

<p>In addition to the operating system, the ICS 45C VM consists (more or less) of the following software:</p>

<ul>
  <li><b>OpenSSH Server</b>, which allows you to connect to the VM via <b>ssh</b>, the way you might connect to the command line of another computer outside of your own.</li>
  <li>Two C++ compilers: <b>Clang 3.4</b> (which we'll be using in this course) and <b>GCC 4.8.1</b> (which was used to get the system set up, but will not be used in the course).</li>
  <li>Two debuggers: <b>LLDB 3.4</b> (which we'll be using in this course) and <b>GDB 7.6</b> (which was used to get the system set up).</li>
  <li>Two tools used to assist in compiling C++ programs: <b>CMake 2.8.11.2</b> and <b>Make 3.81</b>.</li>
  <li>Two source control tools: <b>Git 1.8.3.2</b> and <b>Subversion 1.7.5</b>.</li>
  <li>Three text editors: <b>vim</b>, <b>emacs</b>, and <b>nano</b>.</li>
  <li><b>Python 3.3</b>, in case you'd like to experiment with it as you work through the course.</li>
</ul>

<p>Along with this preinstalled software, the ICS 45C VM also includes an <i>environment</i> for the course, which consists of a set of commands and scripts that you can execute to perform common tasks, and templates from which you can start new project work without having to worry about detailed setup of things like makefiles.  Over the course of the quarter, we'll update the environment, and updating yours is a single command away.  (More on that later.)</p>

</div>

<div class="section">

<hr />

<p class="title">Downloading the ICS 45C VM</p>

<p>You can download the ICS 45C VM at the following links.  Before you do that, please bear two things in mind:</p>

<ul>
  <li>This is a <b><i>large</i></b> download.  To preserve UCI and ICS network bandwidth, we would appreciate it if you would spread the load by sharing it with each other once downloaded; have one of you download it and give copies to ten others, and we'll save a lot of bandwidth that way.</li>
  <li>By request of our system administrators, this download is inaccessible outside of the UCI campus network.  If you try to download it from off-campus, you will likely receive a message that you are forbidden to access it.  Your best move is to download it when you're physically on campus; you can potentially download it via the campus VPN, though you may run afoul of network usage restrictions that way.  Be warned.</li>
</ul>

<p>The ICS 45C VM is available here.  Decide which configuration you'd like (either with or without a GUI) and click the appropriate link.  <i>You'll only need one or the other; you do not need both.</i></p>

<ul>
  <li><a href="http://www.ics.uci.edu/~thornton/ics45c/vm/ics45c-2014winter-no-gui.ova">ICS 45C VM (with no GUI)</a></li>
  <li><a href="http://www.ics.uci.edu/~thornton/ics45c/vm/ics45c-2014winter-gui.ova">ICS 45C VM (with the XFCE GUI)</a></li>
</ul>

<p>The files are in a format called OVA, which is an Open Virtualization Archive, a single file that contains a directory consisting of several files; those files comprise something called an OVF (Open Virtualization Format), which is a standard format for distributing a preconfigured virtual machine, including the contents of its virtual hard disk, various hardware settings, and so on.  The OVF can be imported into the native format used by various virtualizers, such as VirtualBox, the virtualizer we'll be using this quarter.</p>

<p>Be patient; the download may take a fair amount of time.  (So much the better that you get a copy from someone else who's already downloaded it!)  Once you have a complete copy, you can move on to the next step.</p>

</div>

<div class="section">

<hr />

<p class="title">Importing the ICS 45C VM into VirtualBox</p>

<p>Once you've downloaded the OVA file containing the ICS 45C VM, you'll be ready to import it into VirtualBox.  (Did you install VirtualBox already?  If not, you'll need to do that before you proceed.)  Here's what you'll need to do to import the VM into VirtualBox.</p>

<p class="subtitle">Launching VirtualBox</p>

<p>First, launch the VirtualBox application that you installed previously.  This will bring up a window titled <b>Oracle VM VirtualBox Manager</b>, which lists the VMs that you've installed, allowing you to do things like start them, stop them, create new VMs, etc.</p>

<p class="subtitle">Configuring VirtualBox's network settings</p>

<p>In order for your host operating system to communicate with your new VM, you may need to configure VirtualBox's network settings.  In our experience, this is usually configured automatically when running VirtualBox on Windows, but needs to be configured manually when running VirtualBox on Mac OS X.  Before proceeding, you'll need to ensure that things are set up correctly and, if not, you'll need to set them up.</p>

<p>In particular, what you'll need to configure is something called a <i>host-only network adapter</i>.  This is what allows your host operating system to connect to your VM, as though your VM was a separate machine running on a network.</p>

<ul>
  <li>From the <b>File</b> menu in VirtualBox, select <b>Preferences...</b>.</li>
  <li>This will bring up a settings dialog that will allow you to configure various settings.  Select <b>Network</b> in the list along the left-hand side.</li>
  <li>You should now see a list of <b>Host-only Networks</b>.  If this list has an adapter listed (e.g., on Windows, you will likely see something called a "VirtualBox Host-Only Ethernet Adapter"), you're in business, though you'll want to check its settings (see below).  If not, you'll need to create one.
    <ul>
      <li>Click the <b>Add host-only network</b> button (this may be an icon with a plus sign on it) to add a new host-only network adapter</li>
      <li>If asked, specify a name for the host-only network adapter.</li>
      <li>The setting titled <b>Adapter</b> should be set to <b>Manually configured</b>.</li>
      <li>The setting titled <b>DHCP Server</b> should be set to <b>Enabled</b>.</li>
    </ul>
  </li>
  <li>You should now see a host-only network adapter listed.  Make a note of its name; you'll need it again a little later.</li>
  <li>It's possible that your host-only network adapter &mdash; either the one that was already in place, or the one you just added &mdash; will not have the correct settings, so this is how you check to be sure the settings are correct:
    <ul>
      <li>Select the host-only network adapter in the list and click the <b>Edit host-only network</b> button (this may be an icon that looks like a screwdriver).  This will pop up a dialog box in which you can view and edit the settings for your host-only network adapter.</li>
      <li>On the <b>Adapter</b> tab, verify the following settings (and change them if they don't match):
        <ul>
          <li><b>IPv4 Address:</b> 192.168.56.1</li>
          <li><b>IPv4 Network Mask:</b> 255.255.255.0</li>
          <li>The IPv6-related settings are not important for our work here</li>
        </ul>
      </li>
      <li>On the <b>DHCP Server</b> tab, verify the following settings (and change them if they don't match):
        <ul>
          <li>Make sure the checkbox labeled <b>Enable Server</b> is checked.</li>
          <li><b>Server Address</b>: 192.168.56.100</li>
          <li><b>Server Mask</b>: 255.255.255.0</li>
          <li><b>Lower Address Bound</b>: 192.168.56.101</li>
          <li><b>Upper Address Bound</b>: 192.168.56.254</li>
        </ul>
      </li>
      <li>If you made any changes, click <b>OK</b>.  Otherwise, click <b>Cancel</b>.</li>
    </ul>
  </li>
</ul>

<p class="subtitle">Importing the OVF into VirtualBox</p>

<p>The next step is importing the OVF &mdash; the OVA file you downloaded previously &mdash; into VirtualBox, which will create your new VM.</p>

<p><i>Note that you will need several gigabytes of free hard disk space in order to complete this process successfully.  Be sure you have that available now before proceeding.</i></p>

<ul>
  <li>From the <b>File</b> menu, select <b>Import Appliance...</b>.</li>
  <li>When asked to choose an OVF to import, click the <b>Open Appliance...</b> button (which might also say <b>Choose...</b>), then find the OVA file you downloaded previously.</li>
  <li>A dialog displaying <b>Appliance settings</b> will be shown, in which you can see the various configuration options already set up.  <i>Do not</i> change any of these settings at this stage &mdash; <i>most especially</i>, do not change the network settings or check the box that offers to "Reinitialize the MAC address of all network cards," which can render the network settings invalid and make it difficult to use the VM once it's imported.  Click <b>Import</b> to begin the process of importation.</li>
  <li>After waiting for a while for the import to be completed &mdash; this can take some time, as this is a large file &mdash; you should see a VM titled <b>ics45-2014winter</b> listed in the Oracle VM VirtualBox Manager window.  This is the ICS 45C VM.</li>
</ul>

<p class="subtitle">Hooking up the host-only network adapter</p>

<p>The next step is to verify that your VM is connected to VirtualBox's host-only network adapter correctly.  Here's what you do:</p>

<ul>
  <li>In the <b>Oracle VM VirtualBox Manager</b> window, select your new VM in the list along the left-hand side.  From the <b>Machine</b> menu, select <b>Settings</b>.</li>
  <li>A settings dialog should appear, which allows you to configure settings for your new VM.  Along the left-hand side, select <b>Network</b>.</li>
  <li>Click the tab labeled <b>Adapter 2</b>, to display the settings for your VM's host-only network.</li>
  <li>The setting titled <b>Attached to</b> should be <b>Host-only Adapter</b> already.  Leave that setting as it is.</li>
  <li>If the setting titled <b>Name</b> does not list the name of the host-only network adapter created earlier, select it from the dropdown list.  If nothing is shown in the dropdown list, it means you haven't created the host-only network adapter yet; see the section titled <i>Configuring VirtualBox's network settings</i> above for details on how to set it up.</li>
  <li>Click <b>OK</b> to save the change.  You should now be ready to go!</li>
</ul>

<p class="subtitle">A word about where the VM files are stored</p>

<p>Note that VirtualBox prefers to store the VM files in a particular directory (e.g., on Windows, VMs are stored by default in <b>C:\Users\<i>your_user_name</i>\VirtualBox VMs</b>).  If you'd rather store the files somewhere else, you have two choices:</p>

<ul>
  <li>After importing the VM, find the directory on your hard drive containing the VM's files.  Move the entire directory where you want it to be.  Then, in Oracle VM VirtualBox Manager, select the <b>ics45c-2014winter</b> VM, then open the <b>Machine</b> menu and click <b>Remove</b>, which will remove the VM from your Oracle VM VirtualBox Manager list.  Finally, open the <b>Machine</b> menu and click <b>Add</b>, then navigate to the directory in its new location.</li>
  <li>Before importing the VM into Oracle VM VirtualBox Manager, open the <b>File</b> menu, then select <b>Preferences...</b>.  On the ensuing dialog, find the setting titled something like <b>Default Machine Folder</b> and choose your desired location for VMs to be stored.  After making that change, any subsequently created or imported VM will be stored in your chosen location.</li>
</ul>

<p class="subtitle">Using the ICS 45C VM in the ICS labs</p>

<p>If you want to use the ICS 45C VM in the ICS labs, you should use the procedure described in the previous section to move the files to a removable storage device (e.g., a USB stick).  Files stored on the ICS lab machines are deleted automatically when you log out, but you won't want to download and reinstall the VM every time you enter the lab, particularly because any files you will have stored on the VM the last time you used it will have been lost.</p>

<p>Note that you'll need a fair amount of available space on your USB stick; you might be able to get by with 4GB (especially if you choose the non-GUI version of the VM), but 8GB and above is probably safer.</p>

</div>

<div class="section">

<hr />

<p class="title">Starting the ICS 45C VM and logging into it for the first time</p>

<p>Once you've imported the ICS 45C VM into VirtualBox, you're ready to start it up and log into it for the first time.  In the Oracle VM VirtualBox Manager, select the <b>ics45c-2014winter</b> VM and click the <b>Start</b> button.  You'll see another window pop up, which is the <i>console</i> of your VM.</p>

<p class="subtitle">Logging into the non-GUI version of the VM</p>

<p>If you're using the ICS 45C VM with no GUI, this window will contain a Linux <i>console</i> (i.e., a command shell, not unlike the Command Prompt window in Windows or Terminal window on Mac OS X), but will notably be missing a graphical user interface.  A prompt will look something like this:</p>

<blockquote><pre>
Ubuntu 13.10 ics45-2014winter tty1

ics45c-2014winter login: 
</pre></blockquote>

<p>Type the username <b>ics45c</b> and press Enter.  You'll then be asked for a password; initially, the password is also <b>ics45c</b> (though you'll want to change that).  Enter the password and press Enter again.</p>

<p>Once successfully logged in on the non-GUI version of the VM, a welcome message will be displayed, with some information about the VM's setup.  You'll then see a cursor blinking after a prompt that looks like this; we'll call this the <i>shell prompt</i>:</p>

<blockquote><pre>
ics45c@ics45c-2014winter : ~ $ 
</pre></blockquote>

<p class="subtitle">Logging into the GUI version of the VM</p>

<p>If you're using the ICS 45C VM with a GUI, you'll instead see a dialog box asking you to specify a username and a password.  The username is selected from a dropdown list; <b>ics45c</b> will probably already be selected, but make sure it's selected if it's not already.  In the text field below that, type the password <b>ics45c</b> &mdash; which you'll want to change (see below) &mdash; and click the <b>Log In</b> button.</p>

<p>Having logged in, you should eventually see a desktop, much like you would see on Winndows or Mac OS X.  In the top-left corner is a small icon that can be used to start common applications or edit operating system settings.  Alternatively, if you move your mouse cursor near the bottom of the window, you'll see icons for some commonly-used applications.  Either way, onne of the most important of these, for us, is the Terminal application, which will give you a shell prompt just like the one you'd see in the non-GUI version of the VM.  Find the Terminal application and start it.  A window should pop up and contain a prompt that looks like this:</p>

<blockquote><pre>
ics45c@ics45c-2014winter : ~ $
</pre></blockquote>

<p class="subtitle">The shell prompt</p>

<p>Whether you're using the non-GUI or GUI versions of the ICS 45C VM, you will spend a lot of your time interacting with a <i>shell prompt</i>.  It's important, first, to understand what the shell prompt itself is telling you.</p>

<p>The first part, <b>ics45c@ics45c-2014winter</b>, identifies the username (ics45c) and the name of the VM (ics45c-2014winter).  The colon is meant to separate this from the next part, which lists the <i>current working directory</i> (i.e., the directory on the virtual hard drive where we currently reside); initially, that directory is the special directory <b>~</b>, which is our <i>home directory</i> (a shorthand for our actual home directory location, <b>/home/ics45c</b>).</p>

<p>At this point, you're logged into your VM and ready to issue it some commands.</p>

<p class="subtitle">Changing your password</p>

<p>Before you get too much farther, it's a good idea to change your password, so that other students can't log into your VM if you don't want them to.  Changing your password is simple:</p>

<ul>
  <li>From the shell prompt, type the command <b>passwd</b> and press Enter.</li>
  <li>When asked for the current password, type <b>ics45c</b> and press Enter.</li>
  <li>When asked for a new password, type something else that you can remember and press Enter.</li>
  <li>Finally, you'll be asked to re-type the new password to confirm it's the one you want.  Type your new password again and press Enter.</li>
  <li>If you typed the new password the same way twice, your password is now changed.  <i>Don't lose your new password!  There's nothing we'll be able to do to help you get it back if you do!</i></li>
</ul>

<p class="subtitle">Taking a look around using the shell prompt</p>

<p>A Linux shell prompt can be intimidating if you've spent most of your time using an operating system with a graphical user interface.  However, familiarizing yourself with a shell prompt &mdash; on any operating system, not just Linux &mdash; is a worthwhile skill, because many more advanced tasks are either difficult or even impossible from a typical operating system's graphical user interface; the graphical interface will usually streamline common tasks, but when it comes time to do something more involved, a shell prompt is wonderfully useful.</p>

<p>At the shell prompt while within your home directory, type the command <b>ls</b> and press Enter.  <b>ls</b> is a way to list the files residing in the current working directory.  You should see something like this:</p>

<blockquote><pre>
environment/  libs/
</pre></blockquote>

<p>(If you're using the GUI version of the VM, you'll also see several other directories, like <b>Documents/</b>, <b>Pictures/</b>, and <b>Music/</b>, but we won't be using those for our work.)</p>

<p>You can tell that both <b>environment</b> and <b>libs</b> are themselves directories (<i>subdirectories</i> of your home directory) because of the slashes that come after their names.  This means we can change into them and see what's inside of them.  Issue the command <b>cd environment</b>.  Notice what happens to your shell prompt:</p>

<blockquote><pre>
ics45c@ics45c-2014winter : ~/environment $ 
</pre></blockquote>

<p>It's now telling you that your current working directory is the <b>environment</b> directory <i>inside</i> of your home directory.  Let's take a look at what's inside the environment.  Type the command <b>ls</b> again.</p>

<blockquote><pre>
scripts/  templates/  updates/
</pre></blockquote>

<p>The <b>scripts</b> directory contains a small set of scripts used to automate certain tasks for the course.  The <b>templates</b> directory contains a set of templates used to create new C++ project directories to do your work in.  The <b>updates</b> directory (presently empty) may eventually contain tools and scripts used to update the ICS 45C VM, if we discover a widespread problem for which lots of you need a fix.</p>

<p>(You won't actually want to modify the contents of the <b>environment</b> directory or any of its subdirectories, as it contains scripts and tools that are intended to work the same way for everyone in the course.  But you can feel free to look at what's there, if you're curious.)</p>

<p>Let's leave the <b>environment</b> directory and head back to our home directory.  When you want to move to the directory that contains the current directory (usually called the <i>parent directory</i>), you issue the command <b>cd ..</b>.  (No matter where you are, <b>..</b> (two dots) always means "The parent directory of the directory I'm in now, while <b>.</b> (a single dot) always means "The directory I'm in now.")  Try that now, and then type <b>ls</b> to see if you ended up where you thought you would.</p>

<p>If you ever want to get back to your home directory, that's as simple as typing <b>cd</b> by itself, with no parameter.</p>

</div>

<div class="section">

<hr />

<p class="title">How the ICS 45C VM has been set up</p>

<p>As provided, your ICS 45C VM's home directory will contain three directories:</p>

<ul>
  <li><b>environment</b>, which contains general tools that we'll use throughout the quarter.  Not all of the tools we need are there to begin with, but, as we'll see, a single command can be used to download the latest environment from the course web site, so you can stay up to date.
    <ul>
      <li>As a general rule, you'll want to leave the files in this directory alone.  You have the power on your VM to do pretty much anything you want, though these files turn out to be important for what we'll be doing.  But if you ever do cause problems in this directory, there's an easy way to get it back, as we'll see.</li>
    </ul>
  </li>
  <li><b>libs</b>, which contains libraries of possible use later in the quarter.  One is a popular C++ library called <b>Boost</b>; the other is a unit testing library called <b>Google Test</b>.  We may eventually find a need for others, in which case I'll ship an update that downloads and configures it for you.</li>
  <li><b>projects</b>, which is initially missing, but will be created later in this project; it will ultimately contain a separate directory for each project you work on &mdash; every time you want to write a new program, you'll need a new "project," even if it's one you're not going to turn in.</li>
</ul>

<p class="subtitle">The <i>ics45c</i> command</p>

<p>From the shell prompt, you can use the command <b>ics45c</b> to perform certain common course-specific functions.  If you're curious what functions are available, type <b>ics45c</b> at a shell prompt and press Enter; you'll see a description of how to use the <b>ics45c</b> command.</p>

<p class="subtitle">Creating a new project and writing your first C++ program</p>

<p>Creating a new project from an existing template is simple; you use the <b>ics45c</b> command to do it.  Let's create our first project:</p>

<ul>
  <li>From the shell prompt, type the command <b>ics45c start_project hello basic</b>.  In this example, <b>start_project</b> means we want to start a new project, <b>hello</b> is the name of our project, and <b>basic</b> is the name of the template that we want to create the project from.  (The <b>basic</b> template is already installed in the <b>~/environment/templates</b> directory.)</li>
  <li>A new directory <b>~/projects/hello</b> will be created, containing all of the files you need to compile and run your first C++ program.</li>
  <li>Change to the <b>~/projects/hello</b> directory by typing the command <b>cd ~/projects/hello</b>.  Use the <b>ls</b> command to take a look around.
    <ul>
      <li>You'll see a directory called <b>src</b>, which is where you'll store the C++ source code for your project; additionally, there are several executable scripts such as <b>build</b>, <b>clean</b>, and <b>run</b> &mdash; you can tell they're executable because their names are followed by * in the directory listing &mdash; and a file called <b>CMakeLists.txt</b>, which is a file used to configure compiler settings (a longer story for another day).</li>
    </ul>
  </li>
  <li>To see the contents of the <b>src</b> directory, type <b>ls src</b>.  You'll see a single file, <b>main.cpp</b>, which contains an empty C++ program.  Edit that file using a text editor (the simplest one is called <b>nano</b>, though I would suggest <b>vim</b> or <b>emacs</b> instead; many tutorials online will take you through the details), so that the contents of the file look like this:
<blockquote><pre>
#include &lt;iostream&gt;


int main()
{
    std::cout << "Hello Boo!" << std::endl;
    return 0;
}
</pre></blockquote>
  </li>
  <li>Make sure the changes you made are to a file called <b>main.cpp</b> in the <b>~/projects/hello/src</b> directory.  If you save <b>main.cpp</b> into <b>~/projects/hello</b>, the subsequent steps will fail.  (Our projects in this course will all work under the assumption that all of your C++ is in a subdirectory called <b>src</b>.)</li>
  <li>Once you've saved your changes to <b>main.cpp</b>, you're ready to build the program and run it.  From the <b>~/projects/hello</b> directory, enter the command <b>./build</b> (note the dot and the slash; that's important).  You'll see a fair amount of output, which should conclude with this message, which means that the program was compiled and linked successfully:
<blockquote><pre>
[100%] Built target a.out
</pre></blockquote>
  </li>
  <li>Finally, if building the program was successful, from the <b>~/projects/hello</b> directory, enter the command <b>./run</b>, which should display this output:
<blockquote><pre>
Hello Boo!
</pre></blockquote>
  </li>
</ul>

<p class="subtitle">Restoring or refreshing your ICS 45C environment</p>

<p>Periodically throughout the quarter, it will be necessary to refresh your ICS 45C environment, so that it contains the files necessary for you to proceed with your work.  There are three relevant commands you can use for this purpose:</p>

<ul>
  <li><b>ics45c version</b>, which will display the current version of the environment you have.  This will generally consist of a timestamp (the time it was published to the course web site) and a short description.</li>
  <li><b>ics45c refresh</b>, which will connect to the course web site and download the latest version of the environment, installing it in your <b>~/environment</b> directory in place of your existing one.  (Note: <i>Do not</i> store your own files in the <b>~/environment</b> directory, as they will be wiped out by this process.)</li>
  <li><b>ics45c restore</b>, which you can use if you ever accidentally delete or corrupt your environment to the point where you can't run the above two commands.  This will restore the original environment from when your ICS 45C VM was new; you could subsequently use the <b>ics45c refresh</b> command, then, to download the latest one.</li>
</ul>

<p>In general, I'll specify when the environment has changed, and let you know what version you need to proceed with a task, so there's no need to refresh it unprompted on a regular basis.</p>

</div>

<div class="section">

<hr />

<p class="title">Using SSH to connect to your ICS 45C VM</p>

<p>If you're using the non-GUI version of the ICS 45C VM, the console window provided by Oracle VM VirtualBox has two major limitations: it's small, and it lacks a scroll bar.  So it's not particularly useful for getting your actual work done.  For that, we need to be able to connect to our VM with something better &mdash; and, ideally, more than once, so we have access to more than one shell prompt at a time.  Most of the time when I'm using an Ubuntu Linux VM with no GUI installed, I don't use the console window at all &mdash; it's there, but it's just sitting at the login prompt.</p>

<p>The ICS 45C VM has been configured already so that you can connect to it using a protocol called SSH.  Depending on your host operating system, you would use slightly different tools for this.  (And you might find this useful even if you're using the GUI version of the VM, if you'd prefer not to switch back and forth between the Linux GUI and your host operating system.)</p>

<p>Even if you plan to do most of your work in the Linux GUI, <i>do</i> work through this section and make sure you can connect to your VM using SSH, because you'll need this later when it comes time to submit your work.</p>

<p class="subtitle">Network settings</p>

<p>The ICS 45C VM has been configured so that it will appear to your host operating system to have the IP address 192.168.56.45.  (Note that this is an internal address, and no other machines will be able to connect to it using that address; this is only used for host-to-guest communication, but that's all we need it for.)</p>

<p class="subtitle">Using PuTTY on Windows</p>

<p>If you run Windows, a good tool to use is PuTTY, which you can download <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">here</a>.  (What you want to download from that page is <b>putty.exe</b>.  It's not an installer; it's a program you can drop pretty much anywhere, including a USB stick, if you prefer.)</p>

<p>To connect to your VM using PuTTY, you would do the following:</p>

<ul>
  <li>Under <b>Host Name (or IP address)</b>, type <b>192.168.56.45</b></li>
  <li>Under <b>Connection type</b>, select <b>SSH</b></li>
  <li>Verify that <b>Port</b> is now listed as <b>22</b></li>
</ul>

<p>A number of other settings &mdash; such as the window size and whether the window closes automatically when you log out &mdash; are available.  To avoid setting these things up repeatedly, when you have them the way you want them, type a name (e.g., <b>ics45c-2014winter</b>) under <b>Saved Sessions</b> and click the <b>Save</b> button; this will allow you to load that session and reuse it later, so you don't have to change these settings every time you connect.  (On Windows 7 and above, you'll find that frequently-used sessions are easily accessible from the taskbar if you pin PuTTY to it.  Very handy!)</p>

<p>You can run as many instances of PuTTY as you'd like, which can give you as many shell prompts as you need to do your work.  Don't limit yourself to only one shell prompt; you'll probably find multiple of them useful (as I do).</p>

<p class="subtitle">Using a Terminal window on Mac OS X or various flavors of Unix</p>

<p>On Mac OS X or various flavors of Unix, your best bet will be to bring up a Terminal window, then issue the command <b>ssh ics45c@192.168.56.45</b>.  This should display the login prompt for your ICS 45C VM and allow you to log into it.  You can do that from as many Terminal windows as you'd like, allowing you to have as many shell prompts on your VM as you'll need.  Don't limit yourself to only one shell prompt; you'll probably find multiple of them useful (as I do).</p>

</div>

<div class="section">

<hr />

<p class="title">Shutting down or rebooting your VM</p>

<p>Your VM may feel somewhat like any other application running on your computer, such as a word processor or media player, so you may feel safe simply closing the VM's console window when you're done with it.  It's important to understand that your VM is not just an application; it's more akin to a separate computer, whose video output happens to be displayed in a window on the host.  Just as you don't typically shut down your computer by simply powering it off or unplugging it, it's wise to go through a safe shutdown sequence when you want to shutdown your VM.</p>

<p>When you want to shut down your VM, you should do this; it's the best way to be sure that no data is lost and that you avoid problems like virtual hard drive corruption which, while rare, are not impossible when you simply power the VM down without shutting it down first.  In previous quarters, some students ended up with irreparably corrupted VMs and had to start over with a new one, and the likeliest cause was unsafe shutdowns leaving the VM in a corrupt state.  Best to be careful.</p>

<p class="subtitle">Shutting down or rebooting the GUI version of the VM</p>

<p>In the top-right corner of your VM's GUI, you'll see the word <b>ics45c</b> appear, which is the username you used to log in.  Click that word with your mouse and you'll see a menu pop up, giving you a few options.</p>

<p>To shut down your VM, select <b>Shut Down</b> from that menu.</p>

<p>To reboot your VM instead, select <b>Log Out</b>, which will pop up a dialog box that will given you a handful of options.  Click the <b>Restart</b> button in that dialog to reboot your VM.</p>

<p>Alternatively, you can start the Terminal application and issue the same commands detailed in the next section for shutting down or rebooting the non-GUI version of the VM.</p>

<p class="subtitle">Shutting down or rebooting the non-GUI version of the VM</p>

<p>Shutting down the non-GUI version of the VM is simple.  Log into your VM (either in the VM console window or via SSH), so that you'll have access to any shell prompt, and issue the following command: <b>sudo shutdown -h now</b>.  You may be asked for your password; once you enter it, your VM will be shutdown, the console window will eventually disappear, and any SSH connections will be severed.  </p>

<p>Similarly, you can reboot your VM by issuing the command <b>sudo reboot</b> instead.  Existing SSH connections will be severed and your VM will be stopped and immediately restarted.</p>

<p class="subtitle">What's sudo?</p>

<p>In a Linux machine, certain user accounts can be given special rights to run commands as a <i>superuser</i>.  A superuser is one that can do essentially anything &mdash; equivalent to what is called an "administrator" on some other opreating systems.  This is not a power to be taken lightly; you really can render your VM completely useless by doing things you shouldn't, like deleting the directories that contain operating system files or installed programs that your VM depends on.  But we'll once in a while encounter a situation where we need to execute a command as superuser (e.g., when installing new software, or in the example above of shutting down or rebooting your VM).</p>

<p>When you want to issue a command as the superuser, you prefix the command with the word <b>sudo</b>.  Shutting the VM down and rebooting it are fairly harsh operations &mdash; remember, this is a server operating system, so the operating system's presumption is that the VM could potentially be in use by many users at once &mdash; so they are often available only to superusers.</p>

<p>Not all users on a Linux system are allowed to operate as superusers, though your <b>ics45c</b> user account has been configured so that it can.  This is your VM, so you should be able to do what you want with it.</p>

<p>Along the way, we may discover the need to run other commands as superuser &mdash; e.g., downloading and installing software &mdash; though it's not something you'll likely see often in this course.</p>

</div>

<div class="section">

<hr />

<p class="title">Learning more about Linux</p>

<p>It may seem uncomfortable to be pressed into using an operating system other than the one you're used to.  The idea of spending most of your time at a shell prompt, of learning to use a new text editor like <b>vim</b> or <b>emacs</b>, of having to look up how to do simple things like move files from one place to another might seem unpleasant to you.  But a university education is a great time to experiment with new things, especially new things with real-world applicability.</p>

<p>The Internet is a wonderful resource for learning about Linux and the shell prompt.  Our TAs and lab tutors will be available during our lab meetings to help, as well.  In general, we're leaving you to learn a lot of these things on your own, because you'll usually find that the need to know one thing will lead you to find the answers to four or five other questions you didn't realize you had yet.  It won't be long before you're plenty productive, and this is knowledge that will serve you well for the rest of your technology career.  Embrace this challenge and you <i>will</i> emerge stronger!</p>

</div>

<div class="section">

<hr />

<p class="title">The program</p>

<p>As a warm-up, this project asks you to write and submit a short C++ program.  The program itself isn't actually the interesting part; the goal here is to be sure you're using the ICS 45C VM to do your work, learning what you need to know about one of the available text editors to write your program, and using the provided tools to gather your files for submission.  Even if you normally prefer a different working environment, you would be well-served to use the ICS 45C VM for this project, to be sure that you can use it for your work later in the quarter.</p>

<p class="subtitle">The program's requirements</p>

<p>Your program is required to ask the user to specify his or her first and last name (separately), and then an email address.  In each case, accept anything that a user types on a single line as the answer, and do not perform any validation that the input is "correct" (e.g., that the email address appears to be legitimate).</p>

<p>With that information specified, your program will generate the following output text (with $FIRST_NAME, $LAST_NAME, and $EMAIL replaced by whatever the user specified):</p>

<blockquote><pre>
From: Customer Service &lt;customer_service@ics45c.com&gt;
To: $FIRST_NAME $LAST_NAME &lt;$EMAIL&gt;
Subject: ICS45C appreciates your business!

Dear $FIRST_NAME $LAST_NAME:

We are writing today to thank you for your business, and to invite you
to contact us if you have any comments and concerns about your recent
order.  If so, please email us at customer_service@ics45c.com and we
would be delighted to discuss them with you.


Many Thanks,

ICS45C Customer Service Team
</pre></blockquote>

<p>Layout, punctuation, and spelling are all considered important here.  Though I've indented the text above to set it apart from the rest of this project write-up, each line of your output should begin in the first column (i.e., it should not be indented).</p>

<p class="subtitle">Creating a new project on the ICS 45C VM</p>

<p>At a shell prompt in your VM, issue the command <b>ics45c start_project project0 basic</b>.  This will create a new project in the directory <b>~/projects/project0</b>.  Having done that successfully, change into that directory (<b>cd ~/projects/project0</b>) and you're ready to get started!</p>

<p class="subtitle">Compiling and running your program</p>

<p>Whatever C++ code you write should be placed into the <b>src</b> directory inside your project directory.  When you're reading to compile it, change into the directory <b>~/projects/project0</b> (if you're not already there) and issue the command <b>./build</b>.  (Note the dot and the slash in front of the word "build"; those are important.)  If compiling is successful, then issue the command <b>./run</b> to run your program.</p>

<p class="subtitle">How to solve the problem</p>

<p>You can write anything you'd like in C++ to solve this problem.  Your best bet is to hard-code the text into the program, which is fine for our purposes.  (I recognize that this is not a good software development practice, but this is our first project in a new programming language, so we're picking our battles.)</p>

<p>You can use any C++ techniques you'd like and write the program in any way.  We will not be grading this project for style or quality at all &mdash; something which will most definitely change going forward!  The only goal is that we're able to take the source code you submitted, run the provided <b>build</b> script to compile and link it, then run the provided <b>run</b> script to execute it.</p>

</div>

<div class="section">

<hr />

<p class="title">Gathering and retrieving files from the ICS 45C VM for submission</p>

<p>When you've completed your work on this project, you'll need to submit your C++ source and header files to us.  Because we'll be using some automated tools to test your work, it's important that everyone submits their work in the same format &mdash; files arranged in the same way, in the same directories, etc. &mdash; so I've provided a script called <b>gather</b> in your project directory that will gather up the necessary files, arrange them in the way that we expect, and prepare a file called <b>src.tar.gz</b>; that is the only file you'll need to submit.</p>

<p>The <b>gather</b> script will gather all of the files in your <b>src</b> directory and no others, so be sure that anything you want to submit is in the <b>src</b> directory before running it.</p>

<p class="subtitle">What's a .tar.gz?</p>

<p>A <b>.tar.gz</b> file (sometimes called a "tarball") is a compressed archive format common on Linux and various other flavors of Unix.  (The <b>.tar</b> means that it is an archive of files; the <b>.gz</b> means that the archive has been compressed using an algorithm called gzip.)</p>

<p class="subtitle">Submitting your work using the GUI version of the VM</p>

<p>When you're ready to submit your <b>src.tar.gz</b> file, you'll want to submit it to our web-based system called Checkmate (described below).  The easiest way to do this is to use the web browser (Firefox) built into the ICS 45C VM, which will allow you to log into Checkmate and submit the file as you would on your host operating system.</p>

<p>Alternatively, you might prefer to retrieve the file from your VM and submit it from your host operating system; if so, see the next section for instructions on how to retrieve the file.  (It's not a bad idea to learn how to do this, anyway, as it provides you a way to back up your work, by copying it off of your VM and on to something else.)</p>

<p class="subtitle">Retrieving the tarball from your VM</p>

<p>Unfortunately, because the non-GUI version of the VM has no user interface, it lacks a web browser, which makes it difficult to submit your work to Checkmate directly from that version of your VM.  So, instead, you'll want to retrieve the tarball from your VM, so that a copy of the file is available on your host operating system (where you undoubtedly have a browser available).</p>

<p>The simplest method for retrieving a file is to use a protocol called SCP.  SCP is a protocol that allows you to copy files from one machine to another.  You'd connect to your VM using SCP, then copy the tarball to your host.  How you use SCP depends on your host operating system.</p>

<ul>
  <li>Windows has no built-in support for SCP, but there are a few well-known programs you can download and install.  The simplest is called <b>WinSCP</b>, which provides a graphical user interface for connecting to your VM using SCP.
    <ul>
      <li>Download WinSCP from <a href="http://winscp.net/eng/download.php">winscp.net</a>.  The easiest option is to select the <b>Installation package</b>, which you would want to download and then run; it will install WinSCP and make it available like a typical Windows application (e.g., from the Start menu).</li>
      <li>Launch the WinSCP application.  Click <b>New</b> to create a new session and enter the following values:
        <ul>
          <li>Under <b>Host name</b>, specify <b>192.168.56.45</b> (the IP address of your VM)</li>
          <li>Under <b>Port number</b>, specify <b>22</b></li>
          <li>Under <b>User name</b>, specify <b>ics45c</b></li>
          <li>Under <b>Password</b>, specify the password belonging to the ics45c user account on your VM &mdash; you did change it already, didn't you?</li>
          <li>Leave <b>Private key file</b> blank</li>
          <li>Next to <b>File protocol</b>, select <b>SCP</b></li>
          <li>Now that you've set these up, you can click the <b>Save...</b> button to save these settings so you don't have to enter them again, then click <b>Login</b>.</li>
        </ul>
      </li>
      <li>Once logged in, you should see the files on your VM.  Navigate to the <b>/home/ics45c/projects/project0</b> directory.  You should now see the <b>src.tar.gz</b> file you created earlier, which you can drag and drop to your host machine wherever you'd like it to be stored.</li>
      <li>After copying the file to your host machine, you can close WinSCP.</li>
    </ul>
  </li>
  <li>If you use Mac OS X, Linux, or other flavors of Unix, you're in luck!  SCP support is built into your operating system.  Your best bet is to bring up a shell prompt (e.g., a Terminal window in Mac OS X), decide what directory on your host machine you want to copy the file to, then to issue the command <b>scp ics45c@192.168.56.45:~/projects/project0/src.tar.gz <i>TARGET_DIRECTORY_ON_HOST</i></b> to copy the file.
    <ul>
      <li>So, for example, if you want to copy the tarball to the directory <b>/Users/boo/Documents</b> on your host machine, you would issue this command: <b>scp ics45c@192.168.56.45:~/projects/project0/src.tar.gz /Users/boo/Documents</b></li>
      <li>Note that whatever directory you choose on your host machine will already have to exist!</li>
    </ul>
  </li>
</ul>

<p class="subtitle">Inspecting your tarball before submitting it</p>

<p>It's not a bad idea to inspect the contents of your tarball before you submit it, just to be sure that (a) all of the files you want to submit are included, and (b) the right <i>versions</i> of the files are included.  How you open the file depends on your host operating system:</p>

<ul>
  <li>On Windows, you will need to obtain a tool that can open a <b>.tar.gz</b> file; Windows doesn't support this ability by default.  You may have such a tool already (e.g., WinZip, WinRAR); if not, a good free choice is <a href="http://www.7-zip.org/">7-Zip</a>.</li>
  <li>On Mac OS X, you'll find that you can simply navigate to the file in Finder and double-click on it, which will extract its contents.  It should create a directory called <b>src</b> inside of the directory where the <b>.tar.gz</b> file resides, containing all of the files that are included in the tarball.</li>
  <li>On other flavors of Unix or Linux, you can extract the tarball most easily from a shell prompt, by changing into the directory containing the tarball and issuing the command <b>tar xvfz project1.tar.gz</b>.</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Deliverables</p>

<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>src.tar.gz</b> file, then submit that file (and only that file!) to Checkmate.</p>

<p>Follow <a href="../SubmittingProjects.html">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>

<p class="subtitle">Can I submit after the deadline?</p>

<p>Yes, it is possible, subject to the late work policy for this course which is described in the section titled <i>Late work</i> at <a href="../index.html">this link</a>.</p>

</div>

<div class="section">

<hr />

<p class="title">Understanding the risks of using something other than the ICS 45C VM</p>

<p>You are certainly within your rights to use something other than the ICS 45C VM to do your work this quarter, but you should be aware that you are bearing some risks by doing so:</p>

<ul>
  <li>You'll be responsible for setting up and configuring the necessary software.  As a rule, we won't be available to help configure environments other than the ICS 45C VM; you'll be on your own.  For example, the provided project templates are specifically set up to work on the ICS 45C VM; making them work on something else will be up to you, and you might find this to be a tricky task, even if you believe you have all the same software we do.</li>
  <li>We'll be using the ICS 45C VM to grade your work, so if you write a program that compiles and runs on your own setup, but does not compile and run in the ICS 45C VM, you'll be the one to bear that risk.  (This is not at all unrealistic, given differences in C++ compiler versions and the operating systems they run on, so don't discount this risk lightly.)</li>
  <li>When it comes time to submit your work, we expect everyone to use the provided <b>gather</b> script to gather their files for submission, so that everyone's submission is in the same format.  We have test automation tools that depend on that.  If you work outside of the ICS 45C VM, you'll have the additional problem of making sure that your submission is in the right format &mdash; and, if it's not, risk us not being able to grade your work, or that we deduct points from your submission because we had to perform special workarounds to be able to grade it.</li>
</ul>

<p>At minimum, my suggestion is to get the ICS 45C VM set up, so that you can test your projects in it before submitting them and then run the <b>gather</b> script before submission, even if you prefer to do your day-to-day work elsewhere.</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Rewritten to include instructions for non-GUI and GUI VM versions, with the addition of deliverables, by Alex Thornton, Winter 2014.</li>
  <li>Originally written by Alex Thornton, Fall 2013.</li>
</ul>

</div>

</body>
</html>

